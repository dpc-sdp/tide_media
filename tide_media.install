<?php

/**
 * @file
 * Tide Media install.
 */

use Drupal\embed\Entity\EmbedButton;
use Drupal\field\Entity\FieldConfig;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_install().
 */
function tide_media_install() {
  // Set the icon for Media Browser button in CKEditor.
  $icon = \Drupal::moduleHandler()->getModule('tide_media')->getPath() . '/images/star.png';

  $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  file_prepare_directory($destination, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  /** @var \Drupal\Core\File\FileSystem $fs */
  $fs = \Drupal::service('file_system');
  $icon_destination = file_unmanaged_copy($icon, $destination . DIRECTORY_SEPARATOR . $fs->basename($icon));

  if ($icon_destination) {
    $file = File::create(['uri' => $icon_destination]);
    $file->uid = 1;
    $file->save();

    EmbedButton::load('tide_media')
      ->set('icon_uuid', $file->uuid())
      ->save();
  }
}

/**
 * Implements hook_update_dependencies().
 */
function tide_media_update_dependencies() {
  $dependencies['tide_media'][8002] = [
    'taxonomy' => 8601,
  ];

  return $dependencies;
}

/**
 * Install the License Type taxonomy.
 */
function tide_media_update_8002() {
  if (!Vocabulary::load('license_type')) {
    module_load_include('inc', 'tide_core', 'includes/helpers');
    $config_location = [drupal_get_path('module', 'tide_media') . '/config/install'];
    // Import new vocabulary.
    _tide_import_single_config('taxonomy.vocabulary.license_type', $config_location);
  }

  // Create the 2 default terms.
  $licenses = [
    'Creative Commons Attribution 4.0',
    'Copyright',
  ];

  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  foreach ($licenses as $license) {
    $term = $term_storage->loadByProperties([
      'vid' => 'license_type',
      'name' => $license,
    ]);
    if (empty($term)) {
      Term::create([
        'name' => $license,
        'vid' => 'license_type',
      ])->save();
    }
  }
}

/**
 * Create the new License Type field.
 */
function tide_media_update_8003() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_media') . '/config/install'];
  // Import new field configs.
  _tide_import_single_config('field.storage.media.field_license_type', $config_location);

  $bundles = [
    'audio',
    'document',
    'embedded_video',
    'file',
    'image',
    'video',
  ];

  foreach ($bundles as $bundle) {
    _tide_import_single_config('field.field.media.' . $bundle . '.field_license_type', $config_location);
  }

  // Forcefully import updated media browser view.
  _tide_import_single_config('views.view.tide_media_browser', $config_location, FALSE);
}

/**
 * Update new license type for existing media.
 */
function tide_media_update_8004(&$sandbox) {
  $field_name = 'field_license_type';

  if (!isset($sandbox['tid'])) {
    $cc4_term = \Drupal::entityQuery('taxonomy_term')
      ->condition('vid', 'license_type')
      ->condition('name', 'Creative Commons Attribution 4.0')
      ->execute();
    if (!empty($cc4_term)) {
      $cc4_term = array_keys($cc4_term);
      $sandbox['tid'] = reset($cc4_term);
    }
    else {
      // No CC4 license, bail out early.
      return;
    }
  }

  if (!isset($sandbox['total'])) {
    // Only update media without a new license type.
    $count = \Drupal::entityQuery('media')
      ->notExists($field_name)
      ->count()
      ->execute();
    $sandbox['total'] = $count;
    $sandbox['current'] = 0;
    $sandbox['processed'] = 0;
    $sandbox['#finished'] = $count ? 0 : 1;
  }

  $batch_size = 50;
  $mids = \Drupal::entityQuery('media')
    ->condition('mid', $sandbox['current'], '>')
    ->notExists($field_name)
    ->sort('mid', 'ASC')
    ->range(0, $batch_size)
    ->execute();

  foreach ($mids as $mid) {
    $sandbox['current'] = $mid;
    $media = Media::load($mid);
    if ($media && $media->hasField($field_name)) {
      $media->$field_name->target_id = $sandbox['tid'];
      $media->save();
    }
    $sandbox['processed']++;
  }

  $sandbox['#finished'] = ($sandbox['processed'] / $sandbox['total']);
}

/**
 * Update the remaining config for new license and remove old license field.
 */
function tide_media_update_8005() {
  $old_field_name = 'field_media_license';
  $new_field_name = 'field_license_type';

  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_media') . '/config/install'];

  $bundles = [
    'audio',
    'document',
    'embedded_video',
    'file',
    'image',
    'video',
  ];

  foreach ($bundles as $bundle) {
    $old_field = FieldConfig::loadByName('media', $bundle, $old_field_name);

    // Bail out if the old field no longer exists.
    if (!$old_field) {
      continue;
    }

    // Update form display.
    /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $form_display */
    $form_display = \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('media.' . $bundle . '.default');
    if (!$form_display) {
      _tide_import_single_config('core.entity_form_display.media.' . $bundle . '.default', $config_location, FALSE);
    }
    else {
      $new_field_config = [
        'type' => 'options_select',
        'region' => 'content',
      ];
      $old_field_config = $form_display->getComponent($old_field_name);
      if ($old_field_config) {
        $new_field_config['weight'] = $old_field_config['weight'];
        $form_display->removeComponent($old_field_name);
      }
      $form_display->setComponent($new_field_name, $new_field_config);
      $form_display->save();
    }

    // Update view display.
    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $view_display */
    $view_display = \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('media.' . $bundle . '.default');
    if (!$view_display) {
      _tide_import_single_config('core.entity_view_display.media.' . $bundle . '.default', $config_location, FALSE);
    }
    else {
      $new_field_config = [
        'label' => 'above',
        'type' => 'entity_reference_label',
        'settings' => ['link' => TRUE],
        'region' => 'content',
      ];
      $old_field_config = $view_display->getComponent($old_field_name);
      if ($old_field_config) {
        $new_field_config['weight'] = $old_field_config['weight'];
        $view_display->removeComponent($old_field_name);
      }
      $view_display->setComponent($new_field_name, $new_field_config);
      $view_display->save();
    }

    // Delete the old field.
    try {
      $old_field->delete();
    }
    catch (Exception $exception) {
      watchdog_exception('tide_media', $exception);
    }
  }
}

/**
 * Video transcript field change from text field to WYSIWYG.
 */
function tide_media_update_8006() {
  $entity_type = 'media';
  $field_name = 'field_media_transcript';
  $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);

  if (is_null($field_storage)) {
    return;
  }

  $database = Drupal::database();
  $line_breaks = [
    "\r\n",
    "\n",
    "\r",
  ];
  $br = "<br />";
  // Step1 create two temporary tables for holding data.
  $tmp_table_names = [
    'tmp_table' => 'media__field_media_transcript',
    'tmp_revision_table' => 'media_revision__field_media_transcript',
  ];
  $spec = [
    'type' => 'text',
    'size' => 'big',
    'not null' => FALSE,
  ];

  foreach ($tmp_table_names as $tmp => $table_name) {
    if ($database->schema()->tableExists($table_name)) {
      $database->query("CREATE TABLE {$tmp} SELECT * FROM  {$table_name}");
      $database->truncate($table_name)->execute();
      $database->schema()->addField($table_name, 'field_media_transcript_format', $spec);
    }
  }

  // Step2 update field config from string_long to text_long.
  // Update FieldStorageConfig.
  $new_field_storage = $field_storage->toArray();
  $new_field_storage['type'] = 'text_long';
  $new_field_storage['module'] = 'text';
  $new_field_storage = FieldStorageConfig::create($new_field_storage);
  $new_field_storage->original = $new_field_storage;
  $new_field_storage->enforceIsNew(FALSE);
  $new_field_storage->save();

  // Update field.
  foreach ($field_storage->getBundles() as $bundle => $label) {
    $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
    $new_field = $field->toArray();
    $new_field['field_type'] = 'text_long';
    $new_field = FieldConfig::create($new_field);
    $new_field->original = $field;
    $new_field->enforceIsNew(FALSE);
    $new_field->save();
  }

  // Step 3 data migration.
  foreach ($tmp_table_names as $tmp => $table_name) {
    $database->schema()->addField($tmp, 'field_media_transcript_format', $spec);
    $database->update($tmp)
      ->fields(['field_media_transcript_format' => 'rich_text'])
      ->execute();
    $database->insert($table_name)->from($database->select($tmp, 't')
      ->fields('t'))->execute();
    foreach ($line_breaks as $line_break) {
      $database->update($table_name)->expression('field_media_transcript_value', "REPLACE(field_media_transcript_value,:line_break,:br)", [
        ':line_break' => $line_break,
        ':br' => $br,
      ])->execute();
    }
    $database->schema()->dropTable($tmp);
  }
  drupal_flush_all_caches();
}

/**
 * Enable the field_media_site field in form_display of all media bundles.
 */
function tide_media_update_8007() {
  if (!\Drupal::moduleHandler()->moduleExists('tide_site')) {
    return;
  }
  // Default settings.
  $default_option = [
    'type' => 'options_buttons',
    'region' => 'content',
    'settings' => [],
    'third_party_settings' => [],
  ];
  $bundle_info_service = \Drupal::service('entity_type.bundle.info');
  $entity_form_display_storage = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display');
  $media_bundles = $bundle_info_service->getBundleInfo('media');
  if (!empty($media_bundles) && is_array($media_bundles)) {
    // Enable the field in form_display of all media bundles.
    foreach ($media_bundles as $name => $options) {
      /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $entity_form_display */
      $entity_form_display = $entity_form_display_storage->load('media.' . $name . '.default');
      $entity_form_display->setComponent('field_media_site', $default_option);
      $entity_form_display->save();
    }
  }
}

/**
 * Updating name filter operator for tide image_browser.
 */
function tide_media_update_8008() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('views.view.tide_media_browser');
  $display = $config->get('display');

  // Checking for correct display in view.
  if (!empty($display) && $display['image_browser']['id'] == 'image_browser') {
    $name_filter_operator = $display['image_browser']['display_options']['filters']['name']['operator'];
    // Making sure the operator is not empty.
    if ($name_filter_operator && !empty($name_filter_operator)) {
      $operator = 'display.image_browser.display_options.filters.name';
      $config->set($operator . '.operator', 'contains');
      $config->save();
    }
  }
}
