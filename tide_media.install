<?php

/**
 * @file
 * Tide Media install.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\media\Entity\Media;
use Drupal\paragraphs\Entity\ParagraphsType;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Config\FileStorage;
use Drupal\image\Entity\ImageStyle;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\tide_media\TideOperation;
use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_update_dependencies().
 */
function tide_media_update_dependencies() {
  $dependencies = [];
  $dependencies['tide_media'][8002] = [
    'taxonomy' => 8601,
  ];
  $dependencies['tide_media'][8036] = [
    'tide_core' => 8035,
  ];

  return $dependencies;
}

/**
 * Implements hook_install().
 */
function tide_media_install() {
  TideOperation::enableStandaloneMedia();
  TideOperation::entityUsageDefaultSettings();
}

/**
 * Install the License Type taxonomy.
 */
function tide_media_update_8002() {
  if (!Vocabulary::load('license_type')) {
    module_load_include('inc', 'tide_core', 'includes/helpers');
    $config_location = [drupal_get_path('module', 'tide_media') . '/config/install'];
    // Import new vocabulary.
    _tide_import_single_config('taxonomy.vocabulary.license_type', $config_location);
  }

  // Create the 2 default terms.
  $licenses = [
    'Creative Commons Attribution 4.0',
    'Copyright',
  ];

  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  foreach ($licenses as $license) {
    $term = $term_storage->loadByProperties([
      'vid' => 'license_type',
      'name' => $license,
    ]);
    if (empty($term)) {
      Term::create([
        'name' => $license,
        'vid' => 'license_type',
      ])->save();
    }
  }
}

/**
 * Create the new License Type field.
 */
function tide_media_update_8003() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_media') . '/config/install'];
  // Import new field configs.
  _tide_import_single_config('field.storage.media.field_license_type', $config_location);

  $bundles = [
    'audio',
    'document',
    'embedded_video',
    'file',
    'image',
  ];

  foreach ($bundles as $bundle) {
    _tide_import_single_config('field.field.media.' . $bundle . '.field_license_type', $config_location);
  }

  // Forcefully import updated media browser view.
  _tide_import_single_config('views.view.tide_media_browser', $config_location, FALSE);
}

/**
 * Update new license type for existing media.
 */
function tide_media_update_8004(&$sandbox) {
  $field_name = 'field_license_type';

  if (!isset($sandbox['tid'])) {
    $cc4_term = \Drupal::entityQuery('taxonomy_term')
      ->condition('vid', 'license_type')
      ->condition('name', 'Creative Commons Attribution 4.0')
      ->execute();
    if (!empty($cc4_term)) {
      $cc4_term = array_keys($cc4_term);
      $sandbox['tid'] = reset($cc4_term);
    }
    else {
      // No CC4 license, bail out early.
      return;
    }
  }

  if (!isset($sandbox['total'])) {
    // Only update media without a new license type.
    $count = \Drupal::entityQuery('media')
      ->notExists($field_name)
      ->count()
      ->execute();
    $sandbox['total'] = $count;
    $sandbox['current'] = 0;
    $sandbox['processed'] = 0;
    $sandbox['#finished'] = $count ? 0 : 1;
  }

  $batch_size = 50;
  $mids = \Drupal::entityQuery('media')
    ->condition('mid', $sandbox['current'], '>')
    ->notExists($field_name)
    ->sort('mid', 'ASC')
    ->range(0, $batch_size)
    ->execute();

  foreach ($mids as $mid) {
    $sandbox['current'] = $mid;
    $media = Media::load($mid);
    if ($media && $media->hasField($field_name)) {
      $media->$field_name->target_id = $sandbox['tid'];
      $media->save();
    }
    $sandbox['processed']++;
  }

  $sandbox['#finished'] = ($sandbox['processed'] / $sandbox['total']);
}

/**
 * Update the remaining config for new license and remove old license field.
 */
function tide_media_update_8005() {
  $old_field_name = 'field_media_license';
  $new_field_name = 'field_license_type';

  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_media') . '/config/install'];

  $bundles = [
    'audio',
    'document',
    'embedded_video',
    'file',
    'image',
  ];

  foreach ($bundles as $bundle) {
    $old_field = FieldConfig::loadByName('media', $bundle, $old_field_name);

    // Bail out if the old field no longer exists.
    if (!$old_field) {
      continue;
    }

    // Update form display.
    /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $form_display */
    $form_display = \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('media.' . $bundle . '.default');
    if (!$form_display) {
      _tide_import_single_config('core.entity_form_display.media.' . $bundle . '.default', $config_location, FALSE);
    }
    else {
      $new_field_config = [
        'type' => 'options_select',
        'region' => 'content',
      ];
      $old_field_config = $form_display->getComponent($old_field_name);
      if ($old_field_config) {
        $new_field_config['weight'] = $old_field_config['weight'];
        $form_display->removeComponent($old_field_name);
      }
      $form_display->setComponent($new_field_name, $new_field_config);
      $form_display->save();
    }

    // Update view display.
    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $view_display */
    $view_display = \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('media.' . $bundle . '.default');
    if (!$view_display) {
      _tide_import_single_config('core.entity_view_display.media.' . $bundle . '.default', $config_location, FALSE);
    }
    else {
      $new_field_config = [
        'label' => 'above',
        'type' => 'entity_reference_label',
        'settings' => ['link' => TRUE],
        'region' => 'content',
      ];
      $old_field_config = $view_display->getComponent($old_field_name);
      if ($old_field_config) {
        $new_field_config['weight'] = $old_field_config['weight'];
        $view_display->removeComponent($old_field_name);
      }
      $view_display->setComponent($new_field_name, $new_field_config);
      $view_display->save();
    }

    // Delete the old field.
    try {
      $old_field->delete();
    }
    catch (Exception $exception) {
      watchdog_exception('tide_media', $exception);
    }
  }
}

/**
 * Video transcript field change from text field to WYSIWYG.
 */
function tide_media_update_8006() {
  $entity_type = 'media';
  $field_name = 'field_media_transcript';
  $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);

  if (is_null($field_storage)) {
    return;
  }

  $database = Drupal::database();
  $line_breaks = [
    "\r\n",
    "\n",
    "\r",
  ];
  $br = "<br />";
  // Step1 create two temporary tables for holding data.
  $tmp_table_names = [
    'tmp_table' => 'media__field_media_transcript',
    'tmp_revision_table' => 'media_revision__field_media_transcript',
  ];
  $spec = [
    'type' => 'text',
    'size' => 'big',
    'not null' => FALSE,
  ];

  foreach ($tmp_table_names as $tmp => $table_name) {
    if ($database->schema()->tableExists($table_name)) {
      $database->query("CREATE TABLE {$tmp} SELECT * FROM  {$table_name}");
      $database->truncate($table_name)->execute();
      $database->schema()->addField($table_name, 'field_media_transcript_format', $spec);
    }
  }

  // Step2 update field config from string_long to text_long.
  // Update FieldStorageConfig.
  $new_field_storage = $field_storage->toArray();
  $new_field_storage['type'] = 'text_long';
  $new_field_storage['module'] = 'text';
  $new_field_storage = FieldStorageConfig::create($new_field_storage);
  $new_field_storage->original = $new_field_storage;
  $new_field_storage->enforceIsNew(FALSE);
  $new_field_storage->save();

  // Update field.
  foreach ($field_storage->getBundles() as $bundle => $label) {
    $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
    $new_field = $field->toArray();
    $new_field['field_type'] = 'text_long';
    $new_field = FieldConfig::create($new_field);
    $new_field->original = $field;
    $new_field->enforceIsNew(FALSE);
    $new_field->save();
  }

  // Step 3 data migration.
  foreach ($tmp_table_names as $tmp => $table_name) {
    $database->schema()->addField($tmp, 'field_media_transcript_format', $spec);
    $database->update($tmp)
      ->fields(['field_media_transcript_format' => 'rich_text'])
      ->execute();
    $database->insert($table_name)->from($database->select($tmp, 't')
      ->fields('t'))->execute();
    foreach ($line_breaks as $line_break) {
      $database->update($table_name)->expression('field_media_transcript_value', "REPLACE(field_media_transcript_value,:line_break,:br)", [
        ':line_break' => $line_break,
        ':br' => $br,
      ])->execute();
    }
    $database->schema()->dropTable($tmp);
  }
  drupal_flush_all_caches();
}

/**
 * Enable the field_media_site field in form_display of all media bundles.
 */
function tide_media_update_8007() {
  if (!\Drupal::moduleHandler()->moduleExists('tide_site')) {
    return;
  }
  // Default settings.
  $default_option = [
    'type' => 'options_buttons',
    'region' => 'content',
    'settings' => [],
    'third_party_settings' => [],
  ];
  $bundle_info_service = \Drupal::service('entity_type.bundle.info');
  $entity_form_display_storage = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display');
  $media_bundles = $bundle_info_service->getBundleInfo('media');
  if (!empty($media_bundles) && is_array($media_bundles)) {
    // Enable the field in form_display of all media bundles.
    foreach ($media_bundles as $name => $options) {
      /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $entity_form_display */
      $entity_form_display = $entity_form_display_storage->load('media.' . $name . '.default');
      $entity_form_display->setComponent('field_media_site', $default_option);
      $entity_form_display->save();
    }
  }
}

/**
 * Updating name filter operator for tide image_browser.
 */
function tide_media_update_8008() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('views.view.tide_media_browser');
  $display = $config->get('display');

  // Checking for correct display in view.
  if (!empty($display) && $display['image_browser']['id'] == 'image_browser') {
    $name_filter_operator = $display['image_browser']['display_options']['filters']['name']['operator'];
    // Making sure the operator is not empty.
    if ($name_filter_operator && !empty($name_filter_operator)) {
      $operator = 'display.image_browser.display_options.filters.name';
      $config->set($operator . '.operator', 'contains');
      $config->save();
    }
  }
}

/**
 * Allowing standalone media URLs.
 */
function tide_media_update_8009() {
  $config_factory = \Drupal::configFactory();
  $media_config = $config_factory->getEditable('media.settings');
  $media_config->set('standalone_url', TRUE);
  $media_config->save();
}

/**
 * Set tide_media icon as base64 encoded file.
 */
function tide_media_update_8010() {
  $config_factory = \Drupal::configFactory();
  $media_config = $config_factory->getEditable('embed.button.tide_media');
  $media_config->set('icon.data', '');
  $media_config->set('icon.uri', 'public://embed_buttons/star.png');
  $media_config->save();
}

/**
 * Clean up videos and its config.
 */
function tide_media_update_8011() {
  $storage_handler = \Drupal::entityTypeManager()->getStorage('media');
  $videos = $storage_handler->loadByProperties(['bundle' => 'video']);
  if ($videos) {
    $storage_handler->delete($videos);
  }
  $type = \Drupal::entityTypeManager()->getStorage('media_type')->load('video');
  if ($type) {
    $type->delete();
  }
}

/**
 * Patch for sites that do not have field_media_site attached.
 */
function tide_media_update_8012() {
  if (!\Drupal::moduleHandler()->moduleExists('tide_site')) {
    return;
  }

  $entity_type = 'media';
  $field_name = 'field_media_site';
  $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);

  if (is_null($field_storage)) {
    return;
  }
  // Default settings.
  $default_option = [
    'type' => 'options_buttons',
    'region' => 'content',
    'settings' => [],
    'third_party_settings' => [],
  ];
  $bundle_info_service = \Drupal::service('entity_type.bundle.info');
  $entity_form_display_storage = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display');
  $media_bundles = $bundle_info_service->getBundleInfo('media');
  if (!empty($media_bundles) && is_array($media_bundles)) {
    // Enable the field in form_display of all media bundles.
    foreach ($media_bundles as $name => $options) {
      $field = FieldConfig::loadByName($entity_type, $name, $field_name);
      if (empty($field)) {
        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $name,
          'label' => 'Site',
        ]);
        $field->save();
      }

      /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $entity_form_display */
      $entity_form_display = $entity_form_display_storage->load('media.' . $name . '.default');
      $entity_form_display->setComponent('field_media_site', $default_option);
      $entity_form_display->save();
    }
  }
}

/**
 * Clean up video options from entity browsers.
 */
function tide_media_update_8013() {
  $browsers = \Drupal::entityTypeManager()->getStorage('entity_browser')->loadMultiple();
  foreach ($browsers as $browser) {
    $widget_collection = $browser->getWidgets()->getConfiguration();
    foreach ($widget_collection as $id => $item) {
      if (isset($item['settings']['bundle']) && $item['settings']['bundle'] == 'video') {
        $widget = $browser->getWidget($id);
        $browser->deleteWidget($widget);
        $browser->save();
      }
    }
  }
}

/**
 * Enable Focal Point with default config.
 */
function tide_media_update_8014() {
  if (!\Drupal::moduleHandler()->moduleExists('focal_point')) {
    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['crop']);
    $module_installer->install(['focal_point']);
    // Updating existing seetings to use focal point.
    // Add focal point to field_media_image in display form.
    $config = \Drupal::configFactory()->getEditable('core.entity_form_display.media.image.default');
    // Updating config dependencies.
    $config_dependencies = $config->get('dependencies.config');
    $config_dependencies[] = 'image.style.large';
    $config->set('dependencies.config', $config_dependencies);
    // Updating module dependencies.
    $module = $config->get('dependencies.module');
    $module[] = 'focal_point';
    $config->set('dependencies.module', $module);
    // Adding new field settings.
    $media_image_settings = $config->get('content.field_media_image.settings');
    $media_image_settings['preview_image_style'] = 'large';
    $media_image_settings['offsets'] = '50,50';
    $config->set('content.field_media_image.settings', $media_image_settings);
    $config->set('content.field_media_image.type', 'image_focal_point');
    $config->save();

    // Load the thumbnail image style.
    $thumbnail = ImageStyle::load('thumbnail');

    // Create effect.
    $configuration = [
      'uuid' => NULL,
      'id' => 'focal_point_scale_and_crop',
      'weight' => -1,
      'data' => [
        'width' => 100,
        'height' => 100,
        'crop_type' => 'focal_point',
      ],
    ];
    $effect = \Drupal::service('plugin.manager.image.effect')->createInstance($configuration['id'], $configuration);
    if ($thumbnail) {
      // Add it to the image style and save.
      $thumbnail->addImageEffect($effect->getConfiguration());
      $thumbnail->save();
    }

    // Set the image enhancer for field_media_image field.
    $config = \Drupal::configFactory()->getEditable('jsonapi_extras.jsonapi_resource_config.media--image');
    $config->set('resourceFields.field_media_image.enhancer.id', 'image_enhancer');
    $config->save();
  }
}

/**
 * Migrates field_paragraph_summary to field_paragraph_body.
 */
function tide_media_update_8036(&$sandbox) {
  $wysiwyg = 'field_paragraph_body';
  if (!isset($sandbox['total'])) {
    $count = \Drupal::entityTypeManager()
      ->getStorage('paragraph')
      ->getQuery()
      ->condition('type', 'timeline')
      ->count()
      ->execute();
    $sandbox['total'] = $count;
    $sandbox['current'] = 0;
    $sandbox['processed'] = 0;
    $sandbox['#finished'] = $count ? 0 : 1;
  }
  $batch_size = 10;
  $paragraph_ids = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->getQuery()
    ->condition('id', $sandbox['current'], '>')
    ->condition('type', 'timeline')
    ->sort('id', 'ASC')
    ->range(0, $batch_size)
    ->execute();
  foreach ($paragraph_ids as $paragraph_id) {
    $sandbox['current'] = $paragraph_id;
    $paragraph = Paragraph::load($paragraph_id);
    if ($paragraph && $paragraph->hasField($wysiwyg) && $paragraph->hasField('field_paragraph_summary')) {
      $paragraph->{$wysiwyg}->value = $paragraph->field_paragraph_summary->value;
      $paragraph->{$wysiwyg}->format = 'summary_text';
      $paragraph->setNewRevision(FALSE);
      $paragraph->save();
    }
    $sandbox['processed']++;
  }
  $sandbox['#finished'] = $sandbox['total'] ? $sandbox['processed'] / $sandbox['total'] : 1;
  $sandbox['#finished'] = $sandbox['#finished'] > 1 ? 1 : $sandbox['#finished'];
}

/**
 * Updates the entity_form_display and sets a default format.
 */
function tide_media_update_8037() {
  $entity_form_display = Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('paragraph.timeline.default');
  if ($entity_form_display) {
    $entity_form_display->setComponent('field_paragraph_body', [
      'weight' => 10,
      'settings' => ['rows' => 5, 'placeholder' => ''],
      'third_party_settings' => [],
      'type' => 'text_textarea',
      'region' => 'content',
    ]);
    $hidden = $entity_form_display->get('hidden');
    $hidden['field_paragraph_summary'] = TRUE;
    $entity_form_display->set('hidden', $hidden);
    $entity_form_display->save();
  }

  $entity_form_display_config = \Drupal::configFactory()
    ->getEditable('core.entity_form_display.paragraph.timeline.default');
  $content = $entity_form_display_config->get('content');
  if (isset($content['field_paragraph_summary'])) {
    unset($content['field_paragraph_summary']);
  }
  $entity_form_display_config->set('content', $content)->save();

  $field_timeline_body = \Drupal::configFactory()
    ->getEditable('field.field.paragraph.timeline.field_paragraph_body');
  $settings = $field_timeline_body->get('third_party_settings');
  if (isset($settings['allowed_formats']['summary_text'])) {
    $settings['allowed_formats']['summary_text'] = 'summary_text';
  }
  else {
    $settings['allowed_formats'] = array_merge($settings['allowed_formats'], ['summary_text' => 'summary_text']);
  }
  $field_timeline_body->set('label', 'Summary');
  $field_timeline_body->set('third_party_settings', $settings)->save();
}

/**
 * Update tide_media_browser view with filemime field.
 */
function tide_media_update_8038() {
  // Get the new configs.
  $view = 'views.view.tide_media_browser';
  $config_path = drupal_get_path('module', 'tide_media') . '/config/install';
  $source = new FileStorage($config_path);
  if ($view) {
    $module_dependencies = $source->read($view)['dependencies']['module'];
    $document_browser_display_options = $source->read($view)['display']['document_browser']['display_options'];
    $media_browser_display_options = $source->read($view)['display']['media_browser']['display_options'];
    // Set the new configs in sync.
    $view_tide_media_browser = \Drupal::configFactory()
      ->getEditable('views.view.tide_media_browser');
    $view_tide_media_browser->set('dependencies.module', $module_dependencies)
      ->save();
    $view_tide_media_browser->set('display.document_browser.display_options', $document_browser_display_options)
      ->save();
    $view_tide_media_browser->set('display.media_browser.display_options', $media_browser_display_options)
      ->save();
  }
}

/**
 * Change description and icon of timelines paragraph.
 */
function tide_media_update_8039() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $icon_dir = drupal_get_path('module', 'tide_media') . DIRECTORY_SEPARATOR . 'icons';

  $paragraphs = [
    'timelines' => 'Display short blocks of content in a chronological order.',
  ];
  foreach ($paragraphs as $paragraph_type_id => $description) {
    /** @var \Drupal\paragraphs\Entity\ParagraphsType $paragraph_type */
    $paragraph_type = ParagraphsType::load($paragraph_type_id);
    if ($paragraph_type) {
      $paragraph_type->set('description', $description);
      $paragraph_type->save();

      $icon_filename = $icon_dir . DIRECTORY_SEPARATOR . $paragraph_type_id . '.svg';
      _tide_set_paragraph_type_icon($paragraph_type, $icon_filename);
    }
  }
}

/**
 * Enables entity_usage module.
 */
function tide_media_update_8040() {
  TideOperation::tideMediaInstallModule('entity_usage');
  TideOperation::entityUsageDefaultSettings();
}

/**
 * Updates to have new field_is_streamed field.
 */
function tide_media_update_8041() {
  $configs = [
    'field.storage.media.field_is_streamed' => 'field_storage_config',
    'field.field.media.embedded_video.field_is_streamed' => 'field_config',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_media') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = substr($config, strrpos($config, '.') + 1);
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }
  $update_configs = [
    'field.field.media.embedded_video.field_media_transcript' => 'field_config',
    'core.entity_view_display.media.embedded_video.default' => 'entity_view_display',
    'core.entity_form_display.media.embedded_video.default' => 'entity_form_display',
  ];
  $skipped_settings = [
    'uuid',
    'langcode',
    'status',
    '_core',
    'id',
    'field_name',
    'entity_type',
    'bundle',
    'label',
    'description',
    'required',
    'translatable',
    'field_type',
  ];
  foreach ($update_configs as $update_config => $type) {
    $config_read = _tide_read_config($update_config, $config_location, FALSE);
    $config = \Drupal::configFactory()->getEditable($update_config);
    if (!$config) {
      continue;
    }
    $data = $config->getRawData();
    foreach ($config_read as $key => $item) {
      if (in_array($key, $skipped_settings)) {
        continue;
      }
      NestedArray::setValue($data, [
        $key,
      ], NestedArray::getValue($config_read, [
        $key,
      ]));
    }
    $config->setData($data)->save();
  }
}

/**
 * Update filter operator on document and video pickers [SDPSUP-3966].
 */
function tide_media_update_8042() {
  $views_config = \Drupal::configFactory()->getEditable('views.view.tide_media_browser');
  $views_config->set('display.document_browser.display_options.filters.name.operator', 'contains');
  $views_config->set('display.embedded_video_browser.display_options.filters.name.operator', 'contains');
  $views_config->save();
}

/**
 * Updates with new field_metatags_rtl field.
 */
function tide_media_update_8043() {
  $configs = [
    'field.storage.media.field_metatags_rtl' => 'field_storage_config',
    'field.field.media.embedded_video.field_metatags_rtl' => 'field_config',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_media') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = substr($config, strrpos($config, '.') + 1);
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }
  $update_configs = [
    'core.entity_view_display.media.embedded_video.default' => 'entity_view_display',
    'core.entity_form_display.media.embedded_video.default' => 'entity_form_display',
  ];
  $config_settings = [
    'dependencies',
    'content',
    'hidden',
  ];
  foreach ($update_configs as $update_config => $type) {
    $config_read = _tide_read_config($update_config, $config_location, FALSE);
    $config = \Drupal::configFactory()->getEditable($update_config);
    if (!$config) {
      continue;
    }
    $data = $config->getRawData();
    foreach ($config_read as $key => $item) {
      if (in_array($key, $config_settings)) {
        NestedArray::setValue($data, [
          $key,
        ], NestedArray::getValue($config_read, [
          $key,
        ]));
      }
    }
    $config->setData($data)->save();
  }
}
